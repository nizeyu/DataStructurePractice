/**Method 1
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution
{
    public List<Integer> preorderTraversal(TreeNode root)
    {
        List<Integer> result = new ArrayList<>();
        
        if(root == null)
            return result;
        
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        
        while(!stack.isEmpty())
        {
            TreeNode node = stack.pop();
            
            result.add(node.val);
            
            if(node.right != null)
                stack.push(node.right);
            if(node.left != null)
                stack.push(node.left);
        }
        
        return result;
    }
}

/**Method 2
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution
{
    public List<Integer> preorderTraversal(TreeNode root)
    {
        List<Integer> result = new ArrayList<>();

        if(root == null)
            return result;

        preorderTraversal(root,result);

        return result;
    }

    private void preorderTraversal(TreeNode node, List<Integer> result)
    {
        if(node == null)
            return;
        else
        {
            result.add(node.val);
            preorderTraversal(node.left,result);
            preorderTraversal(node.right,result);
        }
    }
}
